from typing import List, Tuple
from collections import deque


class Solution:
    def minimalSteps(self, maze: List[str]) -> int:
        n_row = len(maze)
        n_col = len(maze[0])
        max_value = 10000

        def find_paths(s: (int, int), t: List[Tuple[int, int]]) -> List[List[int]]:
            dist = [[max_value for _ in range(n_col)] for _ in range(n_row)]
            target = t.copy()
            queue = deque()
            dist[s[0]][s[1]] = 0
            queue.append((s[0], s[1]))
            while queue:
                row, col = queue.popleft()
                for step_row, step_col in [(row, col - 1), (row, col + 1),
                                           (row - 1, col), (row + 1, col)]:
                    # print(step_row, step_col)
                    if (0 <= step_row < n_row and 0 <= step_col < n_col
                            and maze[step_row][step_col] != '#'
                            and dist[step_row][step_col] == max_value):
                        queue.append((step_row, step_col))
                        dist[step_row][step_col] = dist[row][col] + 1
                        if (step_row, step_col) in target:
                            target.remove((step_row, step_col))
                            if not target:
                                break
                if not target:
                    break
                # # left
                # if col > 0 and maze[row][col - 1] != '#' and dist[row][col - 1] == -1:
                #     queue.append((row, col - 1))
                #     dist[row][col - 1] = dist[row][col] + 1
                #     if (row, col - 1) in t:
                #         t.remove((row, col - 1))
                # # right
                # if col + 1 < n_col and maze[row][col + 1] != '#' and dist[row][col + 1] == -1:
                #     queue.append((row, col + 1))
                #     dist[row][col + 1] = dist[row][col] + 1
                #     if (row, col + 1) in t:
                #         t.remove((row, col + 1))
                # # up
                # if row > 0 and maze[row - 1][col] != '#' and dist[row - 1][col] == -1:
                #     queue.append((row - 1, col))
                #     dist[row - 1][col] = dist[row][col] + 1
                #     if (row - 1, col) in t:
                #         t.remove((row - 1, col))
                # # down
                # if row + 1 < n_row and maze[row + 1][col] != '#' and dist[row + 1][col] == -1:
                #     queue.append((row + 1, col))
                #     dist[row + 1][col] = dist[row][col] + 1
                #     if (row + 1, col) in t:
                #         t.remove((row + 1, col))

            return dist

        maze_s = (0, 0)
        maze_t = (0, 0)
        maze_os = []
        maze_ms = []
        for i in range(n_row):
            for j in range(n_col):
                if maze[i][j] == 'S':
                    maze_s = (i, j)
                elif maze[i][j] == 'T':
                    maze_t = (i, j)
                elif maze[i][j] == 'O':
                    maze_os.append((i, j))
                elif maze[i][j] == 'M':
                    maze_ms.append((i, j))
        if not maze_ms:
            dist_s_t = find_paths(maze_s, [maze_t])
            res = dist_s_t[maze_t[0]][maze_t[1]]
            return res if res < max_value else -1
        else:
            # s -> o
            dist_s = find_paths(maze_s, maze_os)
            dist_s_o = [dist_s[maze_o[0]][maze_o[1]] for maze_o in maze_os]
            # s -> o -> m
            dist_o_m = []
            for maze_o in maze_os:
                dist_o = find_paths(maze_o, maze_ms)
                dist_o_m.append([dist_o[maze_m[0]][maze_m[1]] for maze_m in maze_ms])
            dist_s_o_m = [[dist_o_m[i][j] + dist_s_o[i]
                           for j in range(len(maze_ms))] for i in range(len(maze_os))]
            dist_s_m = []
            for i in range(len(maze_ms)):
                tmp_dist = [dist_s_o_m[j][i] for j in range(len(maze_os))]
                dist_s_m.append((tmp_dist.index(min(tmp_dist)), min(tmp_dist)))
            # dist_s_m = list(zip(np.argmin(dist_s_o_m, 0), (np.min(dist_s_o_m, 0))))
            # m -> o -> m
            dist_m_m = [[(-1, 0) for _ in range(len(maze_ms))] for _ in range(len(maze_ms))]
            dist_m_o_m = []
            for i in range(len(maze_ms)):
                for j in range(i + 1, len(maze_ms)):
                    dist_m_o_m = [dist_o_m[k][i] + dist_o_m[k][j] for k in range(len(maze_os))]
                    dist_m_m[i][j] = (dist_m_o_m.index(min(dist_m_o_m)), min(dist_m_o_m))
                    dist_m_m[j][i] = dist_m_m[i][j]
            # m -> t
            dist_m = find_paths(maze_t, maze_ms)
            dist_m_t = [dist_m[maze_m[0]][maze_m[1]] for maze_m in maze_ms]

            del dist_m, dist_m_o_m, dist_o, dist_o_m, dist_s, dist_s_o, dist_s_o_m, maze_o

            # traverse all paths
            def traverse_all_paths(cur_m, remain_m):
                if not remain_m:
                    return [dist_m_t[cur_m]]
                else:
                    res_l = []
                    for m in remain_m:
                        tmp_m = remain_m.copy()
                        tmp_m.remove(m)
                        res_l.extend([cur_i + dist_m_m[m][cur_m][1]
                                      for cur_i in traverse_all_paths(m, tmp_m)])
                    # print(res_l)
                    return res_l

            maze_ms_index = list(range(len(maze_ms)))
            res = []
            for i in maze_ms_index:
                tmp = maze_ms_index.copy()
                tmp.remove(i)
                res.extend([dist_i + dist_s_m[i][1] for dist_i in traverse_all_paths(i, tmp)])
        return min(res) if min(res) < max_value else -1


# print(Solution().minimalSteps(["...O.",".S#M.","..#T.","....."]))
# print(Solution().minimalSteps(["S#O", "M..", "M.T"]))
# print(Solution().minimalSteps(["S#O", "M.T", "M.."]))
# print(Solution().minimalSteps(["S#O", "M.#", "M.T"]))
# print(Solution().minimalSteps(["..#..",".S#..","..#T#"]))
print(Solution().minimalSteps(["#...#...#.#...#.##...#......##........#...#.#.#......##......#.#......#.#..",
                               "#.#...#....#.............#.##..#......#........##..#....#...........#......",
                               "..#.......#.##.##..#...#..#...#.#...............#....#..#..##......#.#..#..",
                               ".......#.#........#.....###..#........#...#..##.......#.....#.#............",
                               ".##....#...#....#...##....................#..#.##...##..#.#.#.......#....#.",
                               ".#.#.....#........#...............#....##..#......#...##.#..#...##..#.#.##.",
                               ".#......#.##..#.#..#..........#.........#......####.....#.#.....####...#...",
                               ".......#..........#.##.#..#..................#...#......#.#...#..#.#..##.#.",
                               "..#....#..##.....#.##..........#.......#.......#..............#.##..#.##..#",
                               "......#........##..#.#..#...#.#..##.........#..###.....#.#...#...#..#.####.",
                               ".#...#.........##........###...#..#....#.....#....#....##......##....#...##",
                               "..........#.#........................#...##....#.#.#.............##.#.#..#.",
                               "....#..#.........#.......#..#.......#.##........####....##..##...#..#......",
                               "..##.....#..#....#.........#...###.#.##.#..#.........#..#...##.#........#..",
                               ".#...#...##.#.......................#..#.....#...................#..##...#.",
                               "..........#............#...##............##....#..#.....#....#..#..........",
                               "#....#.#...##..###......T.#.#...##.....#...#.......#.##......#...#..#..#.#.",
                               "......#...............##........##.#.......#.......#.....#.#..#.........##.",
                               ".#...##.....#......#.##.....#......#.#.......#...#...............##.##.....",
                               "#..........#.#.###...#...#......#..##......#....#.......###..M.#.....##....",
                               ".................#....###..#....#.##.#...##......##..................#.....",
                               "................#...#.....#...#..#..#.#....#............#.#..#.......#...#.",
                               "....#..#..........#...#######....#...#...#.....#####..#....#..#..#......#..",
                               "...#.......#.....#....#......#..##..#.............#..#......##...##...#..#.",
                               "........##..#.#.....#...#.....M#...#..#.#..##..##...#...#....#..........#.#",
                               ".#....##...#.#.#.#..#..#.#.#..#...#.#.....#.......#......#..###..#..#.##...",
                               "..#....#.##.......##.....###...#.####.......#......#..#...#.#....#....#.##.",
                               "...#..#..#.....##.......#...........#.....#.#..#...#.#....##...#.##....#...",
                               ".....#...#.#..#..#..#.......#..##...#.....#M.#.......#.....#.#......#.....#",
                               "...#........#.....#...#....#..#..#.#.....##.#...##..........##......#.#..##",
                               "..........#.##.#..###...#..###..##.....#.##....#....#...#..#..#..#...#...#.",
                               "......##........###..#.#.#......#.........#.......#...#...#................",
                               ".#.#......#........##...#................#.##.........####..#..##..#.#.#...",
                               ".##.##.#.........#.....##.#.#......#..##.#..###......##.#..##.#.######...#.",
                               "##.#...#...##.#.#..#......#...............#..................#......#.##..#",
                               ".......#.#.##.#.#.##..#.#..#.##...#...........#...#....#..##.....#....#.#..",
                               "#.............#......#.##....#...#.#..#.............###...............#....",
                               "...##...#..#.........#.#.##.##..##..###.###..#....#........#..##....##.##..",
                               ".#..#.#..#.#....####......#...#............................#.....#....##...",
                               "......#..#...#...#.............#...#.........###........#..#..M....#.......",
                               "..#.##..........#.......##.#......##..#.....#.....#...##......##..........#",
                               "#...#.#.#.....##.#.....#....#...........##........#....#....#..##...#..#.#.",
                               "...##....#...#...........##.#......##.....#.......##..#..........#.........",
                               "..............#.....#..##..#.....#....##.....#.#.............#..###....#.#.",
                               "...##...#....##.#.....#....#...##..#..#.#........##..##.......#...#..###...",
                               "#....#.....#................#.....#.......##................###............",
                               "....##.#....#...............#.......#......#...#...###............##..#.#..",
                               ".###.###...#..#..#.#.............#..#..#.#..........#.....#....#.#.....#...",
                               "#.....##.#......###.#..........#..#.........#...................#....###...",
                               "#.###....##..#...#.#....M.......#.#..........#.........#....#####...#......",
                               ".##.#...............##...#..........#...#..#..........#..##...#.#.#.....#..",
                               ".#......#..#......##........#...#......#.#..#.#.....##.##.#..#....#.##...#.",
                               "...#.#..##.........##.#........#.........#.##..####..##..#..#...#...##...#.",
                               ".#.....#.............##....#..#...#...##..##..##.....##.....#.......#......",
                               "##.#......#...##.........#.###...........#...#.#.......#...#.#..#..##...#..",
                               ".................##.#....#.#..##..................#.##....###......#.......",
                               "..#.#...#......#..###...#.#............#..........#.##..#..#.....#...#.....",
                               ".##....##............#...#.....#.##.....#.#..#.#..##.##......#..........##.",
                               "#.#.......###..####..##..##............##..#...#.#..................#.###.#",
                               "....##.........#.#..#........#..#..##.#......###...#........#.....##..#....",
                               "#...#...#...#.....#.#..#...#.##..................#.##...#.#..#.......#.....",
                               "....#.##.#.###.......#..........#..###.....#....#.#.#.#......#.#..##.#.....",
                               ".#..............##..#.#.........#.#....#S..#.....#.##....#.##...........#..",
                               "..##......#..#.....#.#.#...#.#.....#.#..#####..###...##...#.....#...#.....#",
                               "........#.##..#.##....#......#.##.#......#....#..#.......#.#.....#........#",
                               "......#.....#...##....###.#...#..#..#.......#..#.#....##.#.....#..#.....#..",
                               "..........#.#...#............#....##..###.......#........#..............#..",
                               "..##...#..##.......##......................#.....#.##..#.#...#.....###.#...",
                               "##............##.....#............#.#.....#..##...##..#...#........##......",
                               "#....#....#.........M......#..#..#..#......#......###........#.#........#..",
                               ".#.#..##...#.#...#.#....#.#....#......#.#..#........#............####......",
                               "....#....#....#.#...#....#..#.#....M.....#...........#...#...##.#......#...",
                               "......##...#....#....#..#.#.##.......#....##.#....#..#..#.#...###..##.##...",
                               ".#......#..#.....#.........#....#.............#........##..##....#.....#.#.",
                               ".#.##.##..#..##.##.#....#...#...........#.....#..##................#.##....",
                               "#..#..###......##.##..##.##...............#.........#....##..#...#.#.#....#",
                               "....#.#...##.#.#.......#.#...#....##..............#..##.......##..#..#.....",
                               "...#.#.........##......#.....#..#.##..###..#..#.#........#......##..#.....#",
                               "#.#.....##.##.......#.#.....#......#..##....#....#..#...........#.#..#.....",
                               "...........##...#...#..#....#..##.....#..#...#.##..............#..##.....#.",
                               "......M#.#.#.......##.##....#.#.#........#.##....#........#...###.......#..",
                               "..........###........#......##...#.#...........#....#.##...#.#...#....#....",
                               ".##.....#.......#...#.....#.....#..........#..#....##............#..#..#...",
                               "...........#...#.#.#.#...#.#....#......#........#.#..#...#....#.#..........",
                               ".##...#..#.###..#.........##....#..............#........#.#..#.##M.........",
                               "###....#..#####..#..#..#...#.....#.#......#####.#.........##.#..#....#.#...",
                               "...#..#.......#........#............##.#.#...#.#...#....###..#.............",
                               "..#.#.#....#...#..#..#.#...#......#...###..#..#...#..##..##....#.......#...",
                               "...#......#..##..#..#............###..........#........#...##..##..#....#..",
                               "###........#..##.....#..##......##..#..#.......#..#.....................O..",
                               "........###.#...#......#.......#....#.....#..#..#....##.##..##....#....#.#.",
                               "##..##..##.....##......#....#.#....##.......##.#........##.#..#....####...#",
                               "#..##....#.....##.#.....#.............#...##.#...#...#..#........#.##......",
                               ".##.#.##...........#...........#.......#.##......##..#.......###..#..##...#",
                               "..#........#....##.....#..#......##...##...#.#.#.#......#....#.#..#.....#..",
                               "..#...##.....#.#.#..................#..#.....#..........#..#.M..#........#.",
                               "..#.....##..#.........##...........##....#........#..M...#........#.#......",
                               ".##.##.....#......................#..#.#...#.........#.....#...###....#.#..",
                               "#.##.....#.....#........#.......##..###.........#.#....#.....#..#..##......",
                               "......#.............##......######...#..#.##...#.##.##.....#.#..#.#.#...##."]))


# https://leetcode-cn.com/problems/xun-bao/
# ["S#O", "M..", "M.T"]
# 1 <= maze.length <= 100
# 1 <= maze[i].length <= 100
# maze[i].length == maze[j].length
# S 和 T 有且只有一个
# 0 <= M的数量 <= 16
# 0 <= O的数量 <= 40，题目保证当迷宫中存在 M 时，一定存在至少一个 O 。
